syntax = "proto3";

package arachne;

// Interface exported by the server.
service Arachne {

    // Play executes a stream of game commands, 
    // streaming back the current state of the game
    rpc Play(stream PlayRequest) returns (stream Game) {}

}

message PlayRequest {
    oneof test_oneof {
        GameRequest game_request = 1;
        MoveRequest move_request = 2;
        DealRequest deal_request = 3;
    }
}

message GameRequest {
    enum GameType {
        RANDOM = 0;
        REPLAY = 1;
      }
      GameType gametype = 1;

      // seed declares the game to be replayed when GameType is REPLAY
      int64 seed = 2;
}

message Game {
    int64 seed = 1;
    int32 cardsRemaining = 2;
    int32 captureCount = 3;

    repeated Stack stack = 4;
}

message Stack {
    int32 hiddenCount = 1;
    repeated Card cards = 2;
}

message Card {
    int32 suit = 1;
    int32 rank = 2;
}

message MoveRequest {
    int32 fromCol = 1;
    int32 fromRow = 2;
    int32 toCol = 3;
}

message DealRequest {}
