// Code generated by protoc-gen-go.
// source: arachne.proto
// DO NOT EDIT!

/*
Package arachne is a generated protocol buffer package.

It is generated from these files:
	arachne.proto

It has these top-level messages:
	GameRequest
	Game
*/
package arachne

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GameRequest_GameType int32

const (
	GameRequest_RANDOM GameRequest_GameType = 0
	GameRequest_REPLAY GameRequest_GameType = 1
)

var GameRequest_GameType_name = map[int32]string{
	0: "RANDOM",
	1: "REPLAY",
}
var GameRequest_GameType_value = map[string]int32{
	"RANDOM": 0,
	"REPLAY": 1,
}

func (x GameRequest_GameType) String() string {
	return proto.EnumName(GameRequest_GameType_name, int32(x))
}
func (GameRequest_GameType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type GameRequest struct {
	Gametype GameRequest_GameType `protobuf:"varint,1,opt,name=gametype,enum=arachne.GameRequest_GameType" json:"gametype,omitempty"`
	// seed declares the game to be replayed when GameType is REPLAY
	Seed int64 `protobuf:"varint,2,opt,name=seed" json:"seed,omitempty"`
}

func (m *GameRequest) Reset()                    { *m = GameRequest{} }
func (m *GameRequest) String() string            { return proto.CompactTextString(m) }
func (*GameRequest) ProtoMessage()               {}
func (*GameRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GameRequest) GetGametype() GameRequest_GameType {
	if m != nil {
		return m.Gametype
	}
	return GameRequest_RANDOM
}

func (m *GameRequest) GetSeed() int64 {
	if m != nil {
		return m.Seed
	}
	return 0
}

type Game struct {
	Id   int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Seed int64 `protobuf:"varint,2,opt,name=seed" json:"seed,omitempty"`
}

func (m *Game) Reset()                    { *m = Game{} }
func (m *Game) String() string            { return proto.CompactTextString(m) }
func (*Game) ProtoMessage()               {}
func (*Game) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Game) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Game) GetSeed() int64 {
	if m != nil {
		return m.Seed
	}
	return 0
}

func init() {
	proto.RegisterType((*GameRequest)(nil), "arachne.GameRequest")
	proto.RegisterType((*Game)(nil), "arachne.Game")
	proto.RegisterEnum("arachne.GameRequest_GameType", GameRequest_GameType_name, GameRequest_GameType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Arachne service

type ArachneClient interface {
	// StartGame starts a new game
	StartGame(ctx context.Context, in *GameRequest, opts ...grpc.CallOption) (*Game, error)
}

type arachneClient struct {
	cc *grpc.ClientConn
}

func NewArachneClient(cc *grpc.ClientConn) ArachneClient {
	return &arachneClient{cc}
}

func (c *arachneClient) StartGame(ctx context.Context, in *GameRequest, opts ...grpc.CallOption) (*Game, error) {
	out := new(Game)
	err := grpc.Invoke(ctx, "/arachne.Arachne/StartGame", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Arachne service

type ArachneServer interface {
	// StartGame starts a new game
	StartGame(context.Context, *GameRequest) (*Game, error)
}

func RegisterArachneServer(s *grpc.Server, srv ArachneServer) {
	s.RegisterService(&_Arachne_serviceDesc, srv)
}

func _Arachne_StartGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArachneServer).StartGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arachne.Arachne/StartGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArachneServer).StartGame(ctx, req.(*GameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Arachne_serviceDesc = grpc.ServiceDesc{
	ServiceName: "arachne.Arachne",
	HandlerType: (*ArachneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartGame",
			Handler:    _Arachne_StartGame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "arachne.proto",
}

func init() { proto.RegisterFile("arachne.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 235 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0x2c, 0x4a, 0x4c,
	0xce, 0xc8, 0x4b, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0x1a, 0x18,
	0xb9, 0xb8, 0xdd, 0x13, 0x73, 0x53, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x2c, 0xb9,
	0x38, 0xd2, 0x13, 0x73, 0x53, 0x4b, 0x2a, 0x0b, 0x52, 0x25, 0x18, 0x15, 0x18, 0x35, 0xf8, 0x8c,
	0x64, 0xf5, 0x60, 0x5a, 0x91, 0xd4, 0x81, 0xd9, 0x21, 0x95, 0x05, 0xa9, 0x41, 0x70, 0xe5, 0x42,
	0x42, 0x5c, 0x2c, 0xc5, 0xa9, 0xa9, 0x29, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0xcc, 0x41, 0x60, 0xb6,
	0x92, 0x12, 0x17, 0x07, 0x4c, 0xa5, 0x10, 0x17, 0x17, 0x5b, 0x90, 0xa3, 0x9f, 0x8b, 0xbf, 0xaf,
	0x00, 0x03, 0x98, 0xed, 0x1a, 0xe0, 0xe3, 0x18, 0x29, 0xc0, 0xa8, 0xa4, 0xc5, 0xc5, 0x02, 0x52,
	0x23, 0xc4, 0xc7, 0xc5, 0x94, 0x99, 0x02, 0xb6, 0x94, 0x39, 0x88, 0x29, 0x33, 0x05, 0x9b, 0x79,
	0x46, 0xb6, 0x5c, 0xec, 0x8e, 0x10, 0xd7, 0x08, 0x19, 0x71, 0x71, 0x06, 0x97, 0x24, 0x16, 0x95,
	0x80, 0xf5, 0x8a, 0x60, 0x73, 0xa4, 0x14, 0x2f, 0x8a, 0xa8, 0x12, 0x83, 0x93, 0x01, 0x97, 0x74,
	0x66, 0xbe, 0x5e, 0x7a, 0x51, 0x41, 0xb2, 0x5e, 0x6a, 0x45, 0x62, 0x6e, 0x41, 0x4e, 0x6a, 0xb1,
	0x5e, 0x51, 0x7e, 0x69, 0x49, 0x6a, 0x7a, 0x69, 0x66, 0x4a, 0xaa, 0x13, 0x7f, 0x10, 0x88, 0xed,
	0x0e, 0x62, 0x07, 0x80, 0x82, 0x29, 0x80, 0x31, 0x89, 0x0d, 0x1c, 0x5e, 0xc6, 0x80, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x72, 0x70, 0xd3, 0x43, 0x40, 0x01, 0x00, 0x00,
}
